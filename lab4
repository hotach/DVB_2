import json, os, random, math
import pyttsx3, vosk, pyaudio, requests

replacements = {
    "‚õÖÔ∏è": "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
    "‚òÄ": "—Å–æ–ª–Ω–µ—á–Ω–æ",
    "‚òÅ": "–æ–±–ª–∞—á–Ω–æ",
    "üåß": "–¥–æ–∂–¥—å",
    "üå®": "—Å–Ω–µ–≥",
    "‚õà": "–≥—Ä–æ–∑–∞",
    "üå©": "–º–æ–ª–Ω–∏—è",
    "üå¶": "–ª–∏–≤–µ–Ω—å",
    "üå°Ô∏è": "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ",
    "üå¨Ô∏è": "–≤–µ—Ç–µ—Ä ",
    "C": " —Ü–µ–ª—å—Å–∏—è",
    "‚Üí": "–∑–∞–ø–∞–¥–Ω—ã–π ",
    "‚Üê": "–≤–æ—Å—Ç–æ—á–Ω—ã–π ",
    "‚Üë": "—é–∂–Ω—ã–π ",
    "‚Üì": "—Å–µ–≤–µ—Ä–Ω—ã–π ",
    "‚Üó": "—é–≥–æ –∑–∞–ø–∞–¥–Ω—ã–π ",
    "‚Üñ": "—é–≥–æ –≤–æ—Å—Ç–æ—á–Ω—ã–π ",
    "‚Üò": "—Å–µ–≤–µ—Ä–æ –∑–∞–ø–∞–¥–Ω—ã–π ",
    "‚Üô": "—Å–µ–≤–µ—Ä–æ –≤–æ—Å—Ç–æ—á–Ω—ã–π ",
    "km/h": " –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –≤ —á–∞—Å"
}
Piter = ["–ø–∏—Ç–µ—Ä—Å–∫–∞—è", "Saint-Petersburg"]
towns = [
    ["–°–∏–Ω–≥–∞–ø—É—Ä–µ", "Singapure"],
    ["–ú–æ—Å–∫–≤–µ", "Moscow"],
    ["–í–æ–ª–≥–æ–≥—Ä–∞–¥–µ", "Volgograd"],
    ["–ü–∞—Ä–∏–∂–µ", "Paris"],
    ["–ù—å—é-–ô–æ—Ä–∫–µ", "New-York"],
    ["–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ", "Vladivostok"]
]

tts = pyttsx3.init()
voices = tts.getProperty('voices')
tts.setProperty('voices', 'en')
for voice in voices:
    print(voice.name)
    if voice.name == 'Tatiana':
        tts.setProperty('voice', voice.id)
    elif voice.name == 'Tatiana':
        tts.setProperty('voice', voice.id)
model = vosk.Model('D:/Vosk/vosk-model-small-ru-0.4')
record = vosk.KaldiRecognizer(model, 16000)
pa = pyaudio.PyAudio()
stream = pa.open(format=pyaudio.paInt16,
    channels=1,
    rate=16000,
    input=True,
    frames_per_buffer=8000)
stream.start_stream()
def listen():
    while True:
        data = stream.read(4000, exception_on_overflow=False)
        if record.AcceptWaveform(data) and len(data) > 0:
            answer = json.loads(record.Result())
            if answer['text']:
                yield answer['text']
def speak(say):
    tts.say(say)
    tts.runAndWait()
def wttr(promt, town):
    req = requests.get('https://wttr.in/'+town+'?format='+promt)
    # –ø—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã –∫ —Ç–µ–∫—Å—Ç—É
    textw = req.text
    for k, v in replacements.items():
        textw = textw.replace(k, v)
    print(req.text)
    print(textw)
    speak(textw)
print('start')
pwd = ''
for text in listen():
    print(text)
    speak(text)
    if text == '–∑–∞–∫—Ä–æ–π':
        quit()
    elif text == '–±–ª–æ–∫–Ω–æ—Ç':
        os.system('notepad.exe')
    elif text == '–±–∞–∑–∞':
        speak("6 8 10 15 —á–µ—Ç—ã—Ä–µ—Å—Ç–∞ –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∞—è –±–∞–∑–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –±—ä –±—ä—ã –±—ä—ã –±—ä—å—ä—å—ä—å")
    elif text == '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä':
        weth = random.randint(1, 20)
        weth = 1 - math.exp(-weth / 10)
        # speak(weth)
        # print(weth)
        if weth < 0.25:
            speak('—Ç–≤–æ—è –ª—é–±–∏–º–∞—è –ø–æ–≥–æ–¥–∞ –æ—Å–µ–Ω—å')
        elif weth < 0.5:
            speak('—Ç–≤–æ—è –ª—é–±–∏–º–∞—è –ø–æ–≥–æ–¥–∞ –≤–µ—Å–Ω–∞')
            print('—Ç–≤–æ—è –ª—é–±–∏–º–∞—è –ø–æ–≥–æ–¥–∞ –≤–µ—Å–Ω–∞')
        elif weth < 0.75:
            speak('—Ç–≤–æ—è –ª—é–±–∏–º–∞—è –ø–æ–≥–æ–¥–∞ –∑–∏–º–∞')
            print('—Ç–≤–æ—è –ª—é–±–∏–º–∞—è –ø–æ–≥–æ–¥–∞ –∑–∏–º–∞')
        elif weth < 1:
            speak('—Ç–≤–æ—è –ª—é–±–∏–º–∞—è –ø–æ–≥–æ–¥–∞ –ª–µ—Ç–æ')
            print('—Ç–≤–æ—è –ª—é–±–∏–º–∞—è –ø–æ–≥–æ–¥–∞ –ª–µ—Ç–æ')
    elif text == '–Ω–µ –º–æ—è –∞ —Ç–≤–æ—è':
        speak('–º–æ—è –ª—é–±–∏–º–∞—è –ø–æ–≥–æ–¥–∞ –ª–µ—Ç–æ')
        print('—Ç–≤–æ—è –ª—é–±–∏–º–∞—è –ø–æ–≥–æ–¥–∞ –ª–µ—Ç–æ')
    elif text == '–≤–µ—Ç–µ—Ä':
        wttr("–≤–µ—Ç–µ—Ä+–ø–∏—Ç–µ—Ä—Å–∫–∏–π+%w", Piter[1])
    elif text == '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞':
        wttr("—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞+–ø–∏—Ç–µ—Ä—Å–∫–∞—è+%t+–æ—â—É—â–∞–µ—Ç—Å—è+–∫–∞–∫+%f", Piter[1])
    elif text == '—Å—Ä–∞–≤–Ω–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É':
        town = random.choice(towns)
        wttr(str("—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞+"+Piter[0]+"+%t+–æ—â—É—â–∞–µ—Ç—Å—è+–∫–∞–∫+%f"), Piter[1])
        wttr("—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞+–≤+"+town[0]+"+%t+–æ—â—É—â–∞–µ—Ç—Å—è+–∫–∞–∫+%f", town[1])
    elif text == '–ø–æ–≥–æ–¥–∞':
        wttr('–ü–æ–≥–æ–¥–∞+–ø–∏—Ç–µ—Ä—Å–∫–∞—è:+%c+—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞+%t+–≤–µ—Ç–µ—Ä+%w', Piter[1])
    elif text == '–∫—Ç–æ —Ç—ã':
        speak("—è –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–≥–æ–¥—ã –≤–∞–ø–∏")
        print("–≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–≥–æ–¥—ã –í–∞–ø–∏")
